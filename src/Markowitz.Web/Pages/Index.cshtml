@page
@model Markowitz.Web.Pages.IndexModel
@{
    ViewData["Title"] = "Markowitz Optimizer";
}

<h1>Markowitz Optimizer (Pro)</h1>

<form method="post" enctype="multipart/form-data">
  <div asp-validation-summary="ModelOnly" class="text-danger"></div>

  <div class="mb-3">
    <label class="form-label">CSV files (timestamp, open, high, low, close)</label>
    <input type="file" name="Files" multiple class="form-control" />
    <small class="form-text text-muted">Ticker name is taken from the file name.</small>
  </div>

  <ul class="nav nav-tabs" id="optimizerTabs" role="tablist">
    <li class="nav-item" role="presentation">
      <button type="button" class="nav-link active" data-target="basic-tab" id="basic-tab-btn">Core</button>
    </li>
    <li class="nav-item" role="presentation">
      <button type="button" class="nav-link" data-target="pro-tab" id="pro-tab-btn">Pro</button>
    </li>
  </ul>

  <div class="tab-content border border-top-0 p-3">
    <div class="tab-pane fade show active" id="basic-tab" role="tabpanel" aria-labelledby="basic-tab-btn">
      <div class="form-check mb-3">
        <input class="form-check-input" type="checkbox" asp-for="AllowShort" id="allow-short-basic">
        <label class="form-check-label" for="allow-short-basic">Allow short selling</label>
      </div>
      <div class="row g-3">
        <div class="col-md-4">
          <label class="form-label">Lookback (days)</label>
          <input type="number" class="form-control" asp-for="LookbackDays" />
        </div>
        <div class="col-md-4">
          <label class="form-label">Start date</label>
          <input type="date" class="form-control" asp-for="Start" />
        </div>
        <div class="col-md-4">
          <label class="form-label">End date</label>
          <input type="date" class="form-control" asp-for="End" />
        </div>
      </div>
      <div class="mt-3">
        <label class="form-label">Target return (annual, optional)</label>
        <input type="number" step="0.0001" class="form-control" asp-for="TargetReturnAnnual" />
        <small class="form-text text-muted">Leave empty for global minimum variance.</small>
      </div>
    </div>

    <div class="tab-pane fade" id="pro-tab" role="tabpanel" aria-labelledby="pro-tab-btn">
      <div class="form-check mb-3">
        <input class="form-check-input" type="checkbox" asp-for="AllowShort" id="allow-short-pro">
        <label class="form-check-label" for="allow-short-pro">Allow short selling</label>
      </div>
      <div class="mb-3">
        <label class="form-label">Optimization method</label>
        <select class="form-select" asp-for="Method" id="method-select">
          @foreach (var method in Enum.GetValues(typeof(Markowitz.Core.Models.OptimizationMethod)).Cast<Markowitz.Core.Models.OptimizationMethod>().Where(m => m != Markowitz.Core.Models.OptimizationMethod.Conic))
          {
            <option value="@method">@method</option>
          }
        </select>
      </div>
      <div class="row g-3">
        <div class="col-md-4">
          <label class="form-label">Global min weight</label>
          <input type="number" step="0.0001" class="form-control" asp-for="GlobalMin" />
        </div>
        <div class="col-md-4">
          <label class="form-label">Global max weight</label>
          <input type="number" step="0.0001" class="form-control" asp-for="GlobalMax" />
        </div>
        <div class="col-md-4">
          <label class="form-label">Risk-free rate (annual)</label>
          <input type="number" step="0.0001" class="form-control" asp-for="RiskFreeAnnual" />
        </div>
      </div>
      <div id="cvar-options" class="mt-3" style="display:none;">
        <label class="form-label">CVaR confidence level (alpha)</label>
        <input type="number" step="0.01" min="0.5" max="0.999" class="form-control" asp-for="CvarAlpha" />
        <label class="form-label mt-3">Scenario file (optional)</label>
        <input type="file" class="form-control" asp-for="ScenarioFile" />
        <small class="form-text text-muted">CSV with columns named after tickers. Values should be scenario returns.</small>
      </div>

      @if (Model.AssetBounds.Any())
      {
        <div class="mt-4">
          <label class="form-label">Per-asset bounds</label>
          <div class="table-responsive">
            <table class="table table-sm table-striped align-middle">
              <thead>
                <tr>
                  <th>Ticker</th>
                  <th style="width:30%">Min</th>
                  <th style="width:30%">Max</th>
                </tr>
              </thead>
              <tbody>
              @for (int i = 0; i < Model.AssetBounds.Count; i++)
              {
                <tr>
                  <td>
                    @Model.AssetBounds[i].Ticker
                    <input type="hidden" asp-for="AssetBounds[i].Ticker" />
                  </td>
                  <td><input type="number" step="0.0001" class="form-control" asp-for="AssetBounds[i].Lower" /></td>
                  <td><input type="number" step="0.0001" class="form-control" asp-for="AssetBounds[i].Upper" /></td>
                </tr>
              }
              </tbody>
            </table>
          </div>
        </div>
      }
      else
      {
        <p class="text-muted mt-3">Upload data to configure per-asset bounds.</p>
      }
    </div>
  </div>

  <button type="submit" class="btn btn-primary mt-3">Optimize</button>
</form>

@if (Model.Result != null)
{
  <hr />
  <h2>Result</h2>
  <p>
    <b>Method:</b> @Model.Result.Method<br />
    <b>Expected Return (annual):</b> @Model.Result.ExpectedReturnAnnual.ToString("P2")<br />
    <b>Volatility (annual):</b> @Model.Result.VolatilityAnnual.ToString("P2")<br />
    <b>Observations:</b> @Model.Result.Observations<br />
    @if (!string.IsNullOrWhiteSpace(Model.Result.Notes))
    {
      <b>Notes:</b> @Model.Result.Notes<br />
    }
  </p>

  <div style="max-width:600px;">
    <canvas id="weightsPie"></canvas>
  </div>

  <table class="table table-striped mt-3">
    <thead><tr><th>Ticker</th><th>Weight</th></tr></thead>
    <tbody>
    @foreach (var kv in Model.Result.Weights)
    {
      <tr><td>@kv.Key</td><td>@kv.Value.ToString("P2")</td></tr>
    }
    </tbody>
  </table>

  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script>
    const data = {
      labels: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Result.Weights.Keys)),
      datasets: [{
        data: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Result.Weights.Values))
      }]
    };
    new Chart(document.getElementById('weightsPie'), { type: 'pie', data: data });
  </script>
}

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const tabs = document.querySelectorAll('#optimizerTabs .nav-link');
    const panes = document.querySelectorAll('.tab-pane');
    tabs.forEach(btn => {
      btn.addEventListener('click', () => {
        tabs.forEach(b => b.classList.remove('active'));
        panes.forEach(p => p.classList.remove('show', 'active'));
        btn.classList.add('active');
        const targetId = btn.getAttribute('data-target');
        const pane = document.getElementById(targetId);
        if (pane) {
          pane.classList.add('show', 'active');
        }
      });
    });

    const methodSelect = document.getElementById('method-select');
    const cvarOptions = document.getElementById('cvar-options');
    const toggleCvar = () => {
      if (!methodSelect) return;
      cvarOptions.style.display = methodSelect.value === 'CvarLinearProgramming' ? '' : 'none';
    };
    methodSelect?.addEventListener('change', toggleCvar);
    toggleCvar();
  });
</script>