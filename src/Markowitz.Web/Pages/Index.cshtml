@page
@model Markowitz.Web.Pages.IndexModel
@using Microsoft.AspNetCore.Mvc.Rendering
@{
    ViewData["Title"] = "Markowitz Optimizer";
    var showTargetCard = Model.Method == Markowitz.Core.Models.OptimizationMethod.QuadraticProgramming;
}

<h1>Markowitz Optimizer (Pro)</h1>

<form method="post" enctype="multipart/form-data">
  <button type="submit" name="action" value="upload" id="upload-submit" class="d-none" formnovalidate>Upload</button>
  <div asp-validation-summary="ModelOnly" class="text-danger"></div>

  <div class="mb-3">
    <label class="form-label">CSV files (timestamp, open, high, low, close)</label>
    <input type="file" name="Files" multiple class="form-control" />
    <small class="form-text text-muted">Ticker name is taken from the file name.</small>  @if (Model.UploadedFileNames.Any())
  {
    <div class="mt-3">
      <label class="form-label">Uploaded files</label>
      <ul class="list-unstyled mb-0">
        @foreach (var fileName in Model.UploadedFileNames)
        {
          <li class="d-flex align-items-center gap-2">
            <button type="submit" name="removeFile" value="@fileName" class="btn btn-sm btn-link text-danger p-0" formnovalidate title="Remove file">
              &times;
            </button>
            <span>@fileName</span>
          </li>
        }
      </ul>
    </div>
  }
  </div>

  <ul class="nav nav-tabs" id="optimizerTabs" role="tablist">
    <li class="nav-item" role="presentation">
      <button type="button" class="nav-link active" data-target="basic-tab" id="basic-tab-btn">Core</button>
    </li>
    <li class="nav-item" role="presentation">
      <button type="button" class="nav-link" data-target="pro-tab" id="pro-tab-btn">Pro</button>
    </li>
  </ul>

  <div class="tab-content border border-top-0 p-3">
    <div class="tab-pane fade show active" id="basic-tab" role="tabpanel" aria-labelledby="basic-tab-btn">
      <div class="form-check mb-3">
        <input class="form-check-input" type="checkbox" asp-for="AllowShort" id="allow-short-basic" data-allow-short-sync="true">
        <label class="form-check-label" for="allow-short-basic">Allow short selling</label>
      </div>
      <div class="row g-3">
        <div class="col-md-4">
          <label class="form-label">Start date</label>
          <input type="date" class="form-control" asp-for="Start" />
        </div>
        <div class="col-md-4">
          <label class="form-label">End date</label>
          <input type="date" class="form-control" asp-for="End" />
        </div>
        <div class="col-md-4">
          <label class="form-label">Target return, % (annual, optional)</label>
          <input type="number" step="0.0001" class="form-control" asp-for="TargetReturnAnnualPercent" />
          <small class="form-text text-muted">Leave empty for global minimum variance.</small>
        </div>
      </div>
    </div>

    <div class="tab-pane fade" id="pro-tab" role="tabpanel" aria-labelledby="pro-tab-btn">
      <div class="form-check mb-3">
        <input class="form-check-input" type="checkbox" asp-for="AllowShort" id="allow-short-pro" data-allow-short-sync="true">
        <label class="form-check-label" for="allow-short-pro">Allow short selling</label>
      </div>
      <div class="row g-3">
        <div class="col-md-6">
          <label class="form-label">Start date</label>
          <input type="date" class="form-control" asp-for="Start" />
        </div>
        <div class="col-md-6">
          <label class="form-label">End date</label>
          <input type="date" class="form-control" asp-for="End" />
        </div>
      </div>
      <div id="target-card-wrapper" class="mt-4 @(showTargetCard ? "" : "d-none")">
        <div class="target-card border rounded-3 shadow-sm">
          <button type="button" class="target-toggle" id="target-toggle" aria-expanded="false" aria-controls="target-content">
            <span class="toggle-title">Optimization target</span>
            <span class="chevron" aria-hidden="true"></span>
          </button>
          <div class="target-content" id="target-content" hidden>
            <div class="row g-3">
              <div class="col-md-6">
                <label class="form-label">Optimization target</label>
                <select class="form-select" asp-for="Target" id="target-select" asp-items="Html.GetEnumSelectList<Markowitz.Core.Models.OptimizationTarget>()"></select>
              </div>
              <div class="col-md-6">
                <label class="form-label">Target volatility, % (annual, optional)</label>
                <input type="number" step="0.0001" class="form-control" asp-for="TargetVolatilityAnnualPercent" id="target-volatility-input" />
                <small class="form-text text-muted">Leave blank to skip the volatility cap.</small>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="mb-3 mt-3">
        <label class="form-label">Optimization method</label>
        <select class="form-select" asp-for="Method" id="method-select">
          @foreach (var method in Enum.GetValues(typeof(Markowitz.Core.Models.OptimizationMethod)).Cast<Markowitz.Core.Models.OptimizationMethod>().Where(m => m != Markowitz.Core.Models.OptimizationMethod.Conic))
          {
            <option value="@method">@method</option>
          }
        </select>
      </div>
      <div class="row g-3">
        <div class="col-md-4">
          <label class="form-label">Global min weight</label>
          <input type="number" step="0.0001" class="form-control" asp-for="GlobalMin" />
        </div>
        <div class="col-md-4">
          <label class="form-label">Global max weight</label>
          <input type="number" step="0.0001" class="form-control" asp-for="GlobalMax" />
        </div>
        <div class="col-md-4">
          <label class="form-label">Risk-free rate (annual)</label>
          <input type="number" step="0.0001" class="form-control" asp-for="RiskFreeAnnual" />
        </div>
      </div>
      <div id="cvar-options" class="mt-3" style="display:none;">
        <label class="form-label">CVaR confidence level (alpha)</label>
        <input type="number" step="0.01" min="0.5" max="0.999" class="form-control" asp-for="CvarAlpha" />
        <label class="form-label mt-3">Scenario file (optional)</label>
        <input type="file" class="form-control" asp-for="ScenarioFile" />
        <small class="form-text text-muted">CSV with columns named after tickers. Values should be scenario returns.</small>
      </div>

      @if (Model.AssetBounds.Any())
      {
        <div class="mt-4">
          <div class="per-asset-card border rounded-3 shadow-sm">
            <button type="button" class="per-asset-toggle" id="per-asset-toggle" aria-expanded="false" aria-controls="per-asset-content">
              <span class="toggle-title">Per-asset bounds</span>
              <span class="chevron" aria-hidden="true"></span>
            </button>
            <div class="per-asset-content" id="per-asset-content">
              <div class="table-responsive">
                <table class="table table-sm table-striped align-middle">
                  <thead>
                    <tr>
                      <th>Ticker</th>
                      <th style="width:30%">Min</th>
                      <th style="width:30%">Max</th>
                    </tr>
                  </thead>
                  <tbody>
                  @for (int i = 0; i < Model.AssetBounds.Count; i++)
                  {
                    <tr>
                      <td>
                        @Model.AssetBounds[i].Ticker
                        <input type="hidden" asp-for="AssetBounds[i].Ticker" />
                      </td>
                      <td><input type="number" step="0.0001" class="form-control" asp-for="AssetBounds[i].Lower" /></td>
                      <td><input type="number" step="0.0001" class="form-control" asp-for="AssetBounds[i].Upper" /></td>
                    </tr>
                  }
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        </div>
      }
      else
      {
        <p class="text-muted mt-3">Upload data to configure per-asset bounds.</p>
      }
    </div>
  </div>

  <button type="submit" name="action" value="optimize" class="btn btn-primary mt-3">Optimize</button>
</form>

@if (Model.Result != null)
{
  <hr />
  <h2>Result</h2>
  <p>
    <b>Method:</b> @Model.Result.Method<br />
    @if (Model.Result.Target is Markowitz.Core.Models.OptimizationTarget objective)
    {
      <b>Objective:</b> @objective.GetDisplayName()<br />
    }
    <b>Expected Return (annual):</b> @Model.Result.ExpectedReturnAnnual.ToString("P2")<br />
    <b>Volatility (annual):</b> @Model.Result.VolatilityAnnual.ToString("P2")<br />
    <b>Observations:</b> @Model.Result.Observations<br />
    @if (!string.IsNullOrWhiteSpace(Model.Result.Notes))
    {
      <b>Notes:</b> @Model.Result.Notes<br />
    }
  </p>

  <div style="max-width:600px;">
    <canvas id="weightsPie"></canvas>
  </div>

  <table class="table table-striped mt-3">
    <thead><tr><th>Ticker</th><th>Weight</th></tr></thead>
    <tbody>
    @foreach (var kv in Model.Result.Weights)
    {
      <tr><td>@kv.Key</td><td>@kv.Value.ToString("P2")</td></tr>
    }
    </tbody>
  </table>

  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script>
    const data = {
      labels: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Result.Weights.Keys)),
      datasets: [{
        data: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Result.Weights.Values))
      }]
    };
    new Chart(document.getElementById('weightsPie'), { type: 'pie', data: data });
  </script>
}


<style>
  .per-asset-card,
  .target-card {
    background-color: #ffffff;
    border-radius: 0.75rem;
    border: 1px solid rgba(0, 0, 0, 0.08);
    overflow: hidden;
  }

  .per-asset-toggle,
  .target-toggle {
    width: 100%;
    padding: 0.9rem 1.25rem;
    border: 0;
    background: linear-gradient(180deg, #f8f9fa, #eef1f4);
    display: flex;
    align-items: center;
    justify-content: space-between;
    font-weight: 600;
    font-size: 1rem;
    color: inherit;
    text-align: left;
    transition: background-color 0.2s ease, box-shadow 0.2s ease;
  }

  .per-asset-toggle:hover,
  .per-asset-toggle:focus-visible,
  .target-toggle:hover,
  .target-toggle:focus-visible {
    background: linear-gradient(180deg, #e9ecef, #dee2e6);
  }

  .per-asset-toggle:focus-visible,
  .target-toggle:focus-visible {
    outline: 0;
    box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
  }

  .per-asset-toggle .toggle-title,
  .target-toggle .toggle-title {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
  }

  .per-asset-toggle .chevron,
  .target-toggle .chevron {
    display: inline-block;
    width: 0.65rem;
    height: 0.65rem;
    border-right: 2px solid currentColor;
    border-bottom: 2px solid currentColor;
    transform: rotate(-45deg);
    transition: transform 0.2s ease;
  }

  .per-asset-toggle[aria-expanded="true"] .chevron,
  .target-toggle[aria-expanded="true"] .chevron {
    transform: rotate(45deg);
  }

  .per-asset-content,
  .target-content {
    display: none;
    padding: 1.25rem;
    background-color: #ffffff;
  }

  .per-asset-content.active,
  .target-content.active {
    display: block;
  }

  .per-asset-content .table,
  .target-content .table {
    margin-bottom: 0;
  }

  @@media (prefers-reduced-motion: reduce) {
    .per-asset-toggle,
    .target-toggle,
    .per-asset-content,
    .target-content {
      transition: none;
    }
  }
</style>
<script>
  document.addEventListener('DOMContentLoaded', function () {
    const tabs = document.querySelectorAll('#optimizerTabs .nav-link');
    const panes = document.querySelectorAll('.tab-pane');
    tabs.forEach(btn => {
      btn.addEventListener('click', () => {
        tabs.forEach(b => b.classList.remove('active'));
        panes.forEach(p => p.classList.remove('show', 'active'));
        btn.classList.add('active');
        const targetId = btn.getAttribute('data-target');
        const pane = document.getElementById(targetId);
        if (pane) {
          pane.classList.add('show', 'active');
        }
      });
    });

    const methodSelect = document.getElementById('method-select');
    const cvarOptions = document.getElementById('cvar-options');
    const targetWrapper = document.getElementById('target-card-wrapper');
    const targetToggle = document.getElementById('target-toggle');
    const targetContent = document.getElementById('target-content');
    const targetSelect = document.getElementById('target-select');
    const targetVolInput = document.getElementById('target-volatility-input');

    const toggleCvar = () => {
      if (!methodSelect) return;
      cvarOptions.style.display = methodSelect.value === 'CvarLinearProgramming' ? '' : 'none';
    };

    const setTargetState = (isExpanded) => {
      if (!targetToggle || !targetContent) return;
      targetToggle.setAttribute('aria-expanded', isExpanded ? 'true' : 'false');
      targetContent.classList.toggle('active', isExpanded);
      targetContent.hidden = !isExpanded;
    };

    if (targetToggle && targetContent) {
      setTargetState(false);
      targetToggle.addEventListener('click', (event) => {
        event.preventDefault();
        const isExpanded = targetToggle.getAttribute('aria-expanded') === 'true';
        setTargetState(!isExpanded);
      });
    }

    const updateTargetVisibility = () => {
      const isQuadratic = methodSelect && methodSelect.value === 'QuadraticProgramming';
      if (targetWrapper) targetWrapper.classList.toggle('d-none', !isQuadratic);
      if (targetSelect) {
        targetSelect.disabled = !isQuadratic;
        if (!isQuadratic) targetSelect.value = 'MinVolatility';
      }
      if (targetVolInput) targetVolInput.disabled = !isQuadratic;
      if (!isQuadratic) setTargetState(false);
    };

    methodSelect?.addEventListener('change', () => {
      toggleCvar();
      updateTargetVisibility();
    });

    toggleCvar();
    updateTargetVisibility();

    const allowShortToggles = document.querySelectorAll('[data-allow-short-sync="true"]');
    if (allowShortToggles.length > 1) {
      const syncAllowShort = (checked) => {
        allowShortToggles.forEach(input => {
          input.checked = checked;
        });
      };
      const initialChecked = Array.from(allowShortToggles).some(input => input.checked);
      syncAllowShort(initialChecked);
      allowShortToggles.forEach(input => {
        input.addEventListener('change', (event) => {
          syncAllowShort(event.target.checked);
        });
      });
    }

    const perAssetToggle = document.getElementById('per-asset-toggle');
    const perAssetContent = document.getElementById('per-asset-content');
    if (perAssetToggle && perAssetContent) {
      const setPerAssetState = (isExpanded) => {
        perAssetToggle.setAttribute('aria-expanded', isExpanded ? 'true' : 'false');
        perAssetContent.classList.toggle('active', isExpanded);
        perAssetContent.hidden = !isExpanded;
      };
      setPerAssetState(false);
      perAssetToggle.addEventListener('click', (event) => {
        event.preventDefault();
        const isExpanded = perAssetToggle.getAttribute('aria-expanded') === 'true';
        setPerAssetState(!isExpanded);
      });
    }

    const form = document.querySelector('form');
    const fileInput = document.querySelector('input[type="file"][name="Files"]');
    const uploadSubmit = document.getElementById('upload-submit');
    if (form && fileInput && uploadSubmit) {
      fileInput.addEventListener('change', () => {
        if (!fileInput.files || fileInput.files.length === 0) return;
        if (typeof form.requestSubmit === 'function') {
          form.requestSubmit(uploadSubmit);
        } else {
          uploadSubmit.click();
        }
      });
    }
  });
</script>


